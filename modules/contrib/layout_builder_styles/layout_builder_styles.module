<?php

/**
 * @file
 * Layout Builder Styles module file.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\layout_builder_styles\LayoutBuilderStyleInterface;

/**
 * Implements hook_form_alter().
 *
 * Modify the configuration form for layout builder components (blocks).
 */
function layout_builder_styles_form_alter(&$form, FormStateInterface $formState) {
  if ($form['#form_id'] === 'layout_builder_add_block' || $form['#form_id'] === 'layout_builder_update_block') {
    // Form object will be AddBlockForm or UpdateBlockForm, depending on
    // the operation.
    $formObject = $formState->getFormObject();

    $blockPluginId = $formObject
      ->getBlock()
      ->getPluginId();

    $bundle = FALSE;
    // If this is a reusable block, retrieve the block bundle.
    if (strpos($blockPluginId, "block_content:") === 0) {
      $uuid = str_replace('block_content:', '', $blockPluginId);
      $bundle = \Drupal::service('entity.repository')->loadEntityByUuid('block_content', $uuid)
        ->bundle();
    }

    $allStyles = \Drupal::entityTypeManager()
      ->getStorage('layout_builder_style')
      ->loadByProperties([
        'type' => LayoutBuilderStyleInterface::TYPE_COMPONENT,
      ]);

    $styleOptions = [];
    foreach ($allStyles as $style) {
      $restrictions = $style->getBlockRestrictions();
      $bundle_allowed = FALSE;
      // If this is a re-usable block, propagate any inline_block allowances
      // by comparing the block bundles.
      if ($bundle && in_array('inline_block:' . $bundle, $restrictions)) {
        $bundle_allowed = TRUE;
      }
      /** @var \Drupal\layout_builder_styles\LayoutBuilderStyleInterface $style */
      if (empty($style->getBlockRestrictions()) || in_array($blockPluginId, $restrictions) || $bundle_allowed) {
        $styleOptions[$style->id()] = $style->label();
      }
    }

    if (!empty($styleOptions)) {
      /** @var \Drupal\layout_builder\SectionComponent $component */
      $component = $formObject
        ->getSectionStorage()
        ->getSection($formObject->getDelta())
        ->getComponent($formObject->getUuid());

      $selectedStyle = $component->get('layout_builder_styles_style');
      _layout_builder_styles_add_style_selection_form_element($form, $styleOptions, $selectedStyle);

      // Our submit handler must execute before the default one, because the
      // default handler stores the section & component data in the tempstore
      // and we need to update those objects before that happens.
      array_unshift($form['#submit'], '_layout_builder_styles_submit_block_form');
    }
  }
}

/**
 * Custom submit handler for submitting LB block forms.
 *
 * Persists the configured block style to the component configuration data,
 * which is later persisted to section storage by layout builder's base form.
 */
function _layout_builder_styles_submit_block_form(array $form, FormStateInterface $formState) {
  $formObject = $formState->getFormObject();

  /** @var \Drupal\layout_builder\SectionComponent $component */
  $component = $formObject
    ->getSectionStorage()
    ->getSection($formObject->getDelta())
    ->getComponent($formObject->getUuid());

  $component->set('layout_builder_styles_style', $formState->getValue('layout_builder_style'));
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the configuration form for layout builder sections (layouts).
 */
function layout_builder_styles_form_layout_builder_configure_section_alter(&$form, FormStateInterface $form_state, $form_id) {
  $formObject = $form_state->getFormObject();

  $allStyles = \Drupal::entityTypeManager()
    ->getStorage('layout_builder_style')
    ->loadByProperties([
      'type' => LayoutBuilderStyleInterface::TYPE_SECTION,
    ]);

  $styleOptions = [];
  foreach ($allStyles as $style) {
    /** @var \Drupal\layout_builder_styles\LayoutBuilderStyleInterface $style */
    $styleOptions[$style->id()] = $style->label();
  }

  if (!empty($styleOptions)) {
    $config = $formObject->getLayout()->getConfiguration();
    $selectedStyle = $config['layout_builder_styles_style'] ?? [];
    _layout_builder_styles_add_style_selection_form_element($form, $styleOptions, $selectedStyle);

    // Our submit handler must execute before the default one, because the
    // default handler stores the section & component data in the tempstore
    // and we need to update those objects before that happens.
    array_unshift($form['#submit'], '_layout_builder_styles_submit_section_form');
  }
}

/**
 * Custom submit handler for submitting LB section forms.
 *
 * This is used to persist the selected style to the layout configuration
 * array, which layout builder's ConfigureSectionForm will persist to section
 * storage.
 */
function _layout_builder_styles_submit_section_form(array $form, FormStateInterface $formState) {
  $formObject = $formState->getFormObject();

  $formObject
    ->getLayout()
    ->setConfiguration(['layout_builder_styles_style' => $formState->getValue('layout_builder_style')]);
}

/**
 * Add a style selection form element to an existing form.
 *
 * @param array $form
 *   The form array to add to.
 * @param array $styleOptions
 *   The style options to make available.
 * @param mixed $selectedStyle
 *   The existing selected style(s), either a string or array.
 */
function _layout_builder_styles_add_style_selection_form_element(array &$form, array $styleOptions, $selectedStyle) {
  // Set form actions to a high weight, just so that we can make our form
  // style element appear right before them.
  $form['actions']['#weight'] = 100;
  $form['layout_builder_style'] = [
    '#type' => 'select',
    '#options' => $styleOptions,
    '#title' => t('Style'),
    '#default_value' => $selectedStyle,
    '#required' => FALSE,
    '#empty_option' => t('- None -'),
    '#weight' => 90,
  ];

  // If we're configured to allow multiple selections, then we need to change
  // the form widget to one that supports multiple selections.
  $config = \Drupal::config('layout_builder_styles.settings');
  if ($config && $config->get('multiselect') === 'multiple') {
    // The existing value may not be stored as an array if the site admin
    // switched from allowing one selection to allowing multiple.
    if (!is_array($selectedStyle)) {
      $selectedStyle = [$selectedStyle];
    }
    $form['layout_builder_style']['#default_value'] = array_filter($selectedStyle);
    if ($config->get('form_type') === 'checkboxes') {
      $form['layout_builder_style']['#type'] = 'checkboxes';
    }
    else {
      $form['layout_builder_style']['#multiple'] = TRUE;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function layout_builder_styles_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Add theme hook suggestions for block templates based on the configured
  // style.
  // This value will be populated only when the module is in
  // 'single-selection' mode, and a style has been assigned
  // to the given block, so no additional checks are needed here.
  if (!empty($variables['elements']['#layout_builder_style'])) {
    if (is_string($variables['elements']['#layout_builder_style'])) {
      $styleId = $variables['elements']['#layout_builder_style'];
    }
    elseif (count($variables['elements']['#layout_builder_style']) < 2) {
      $styleId = reset($variables['elements']['#layout_builder_style']);
    }
    if (isset($styleId)) {
      $suggestions[] = 'block__' . $styleId;
      // For each existing suggestion, provide a duplicate one that adds the
      // block style ID.
      foreach ($suggestions as $suggestion) {
        $suggestions[] = $suggestion . '__' . $styleId;
      }
    }

  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function layout_builder_styles_preprocess_layout(&$variables) {
  // Apply a configured style to a layout by adding the style's CSS classes.
  if (isset($variables['settings']['layout_builder_styles_style'])) {
    $selected = $variables['settings']['layout_builder_styles_style'];
    /** @var \Drupal\layout_builder_styles\LayoutBuilderStyleInterface $style */

    // Convert single selection to an array for consistent processing.
    if (!is_array($selected)) {
      $selected = [$selected];
    }

    // Retrieve all styles from selection(s).
    $grouped_classes = [];
    foreach ($selected as $stylename) {
      if ($layout_style = \Drupal::entityTypeManager()->getStorage('layout_builder_style')->load($stylename)) {
        $classes = \preg_split('(\r\n|\r|\n)', $layout_style->getClasses());
        $grouped_classes = array_merge($grouped_classes, $classes);
        $variables['#cache']['tags'][] = 'config:layout_builder_styles.style.' . $layout_style->id();
      }
    }

    if (!empty($grouped_classes)) {
      if (!isset($variables['attributes']['class']) || !is_array($variables['attributes']['class'])) {
        $variables['attributes']['class'] = [];
      }
      $variables['attributes']['class'] = array_merge($variables['attributes']['class'], $grouped_classes);
    }
  }
}
